// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  news: (where?: NewsWhereInput) => Promise<boolean>;
  repo: (where?: RepoWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
  upvote: (where?: UpvoteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  news: (where: NewsWhereUniqueInput) => NewsPromise;
  newses: (
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<News>;
  newsesConnection: (
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NewsConnectionPromise;
  repo: (where: RepoWhereUniqueInput) => RepoPromise;
  repoes: (
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Repo>;
  repoesConnection: (
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RepoConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagPromise;
  tags: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Tag>;
  tagsConnection: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TagConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkPromise;
  talks: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Talk>;
  talksConnection: (
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TalkConnectionPromise;
  upvote: (where: UpvoteWhereUniqueInput) => UpvotePromise;
  upvotes: (
    args?: {
      where?: UpvoteWhereInput;
      orderBy?: UpvoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Upvote>;
  upvotesConnection: (
    args?: {
      where?: UpvoteWhereInput;
      orderBy?: UpvoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UpvoteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNews: (data: NewsCreateInput) => NewsPromise;
  updateNews: (
    args: { data: NewsUpdateInput; where: NewsWhereUniqueInput }
  ) => NewsPromise;
  updateManyNewses: (
    args: { data: NewsUpdateManyMutationInput; where?: NewsWhereInput }
  ) => BatchPayloadPromise;
  upsertNews: (
    args: {
      where: NewsWhereUniqueInput;
      create: NewsCreateInput;
      update: NewsUpdateInput;
    }
  ) => NewsPromise;
  deleteNews: (where: NewsWhereUniqueInput) => NewsPromise;
  deleteManyNewses: (where?: NewsWhereInput) => BatchPayloadPromise;
  createRepo: (data: RepoCreateInput) => RepoPromise;
  updateRepo: (
    args: { data: RepoUpdateInput; where: RepoWhereUniqueInput }
  ) => RepoPromise;
  updateManyRepoes: (
    args: { data: RepoUpdateManyMutationInput; where?: RepoWhereInput }
  ) => BatchPayloadPromise;
  upsertRepo: (
    args: {
      where: RepoWhereUniqueInput;
      create: RepoCreateInput;
      update: RepoUpdateInput;
    }
  ) => RepoPromise;
  deleteRepo: (where: RepoWhereUniqueInput) => RepoPromise;
  deleteManyRepoes: (where?: RepoWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (
    args: { data: TagUpdateInput; where: TagWhereUniqueInput }
  ) => TagPromise;
  updateManyTags: (
    args: { data: TagUpdateManyMutationInput; where?: TagWhereInput }
  ) => BatchPayloadPromise;
  upsertTag: (
    args: {
      where: TagWhereUniqueInput;
      create: TagCreateInput;
      update: TagUpdateInput;
    }
  ) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (
    args: { data: TalkUpdateInput; where: TalkWhereUniqueInput }
  ) => TalkPromise;
  updateManyTalks: (
    args: { data: TalkUpdateManyMutationInput; where?: TalkWhereInput }
  ) => BatchPayloadPromise;
  upsertTalk: (
    args: {
      where: TalkWhereUniqueInput;
      create: TalkCreateInput;
      update: TalkUpdateInput;
    }
  ) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;
  createUpvote: (data: UpvoteCreateInput) => UpvotePromise;
  updateUpvote: (
    args: { data: UpvoteUpdateInput; where: UpvoteWhereUniqueInput }
  ) => UpvotePromise;
  upsertUpvote: (
    args: {
      where: UpvoteWhereUniqueInput;
      create: UpvoteCreateInput;
      update: UpvoteUpdateInput;
    }
  ) => UpvotePromise;
  deleteUpvote: (where: UpvoteWhereUniqueInput) => UpvotePromise;
  deleteManyUpvotes: (where?: UpvoteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  news: (
    where?: NewsSubscriptionWhereInput
  ) => NewsSubscriptionPayloadSubscription;
  repo: (
    where?: RepoSubscriptionWhereInput
  ) => RepoSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
  upvote: (
    where?: UpvoteSubscriptionWhereInput
  ) => UpvoteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NewsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "previewImage_ASC"
  | "previewImage_DESC"
  | "isFeatured_ASC"
  | "isFeatured_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "title_ASC"
  | "title_DESC"
  | "previewImage_ASC"
  | "previewImage_DESC"
  | "alt_ASC"
  | "alt_DESC"
  | "isFeatured_ASC"
  | "isFeatured_DESC"
  | "length_ASC"
  | "length_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RepoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "githubName_ASC"
  | "githubName_DESC"
  | "githubOwner_ASC"
  | "githubOwner_DESC"
  | "githubUrl_ASC"
  | "githubUrl_DESC"
  | "ownerUsername_ASC"
  | "ownerUsername_DESC"
  | "isFeatured_ASC"
  | "isFeatured_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UpvoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "githubToken_ASC"
  | "githubToken_DESC"
  | "profilePic_ASC"
  | "profilePic_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface NewsUpdateManyDataInput {
  slug?: String;
  title?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export type NewsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface UpvoteCreateManyWithoutRepoInput {
  create?: UpvoteCreateWithoutRepoInput[] | UpvoteCreateWithoutRepoInput;
  connect?: UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput;
}

export interface RepoCreateInput {
  slug: String;
  githubName: String;
  githubOwner: String;
  githubUrl: String;
  ownerUsername: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserCreateOneInput;
  tags?: TagCreateManyWithoutReposInput;
  upvotes?: UpvoteCreateManyWithoutRepoInput;
}

export interface UpvoteCreateWithoutRepoInput {
  user: UserCreateOneInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface NewsUpdateInput {
  slug?: String;
  title?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer?: UserUpdateOneRequiredWithoutNewsItemsInput;
  tags?: TagUpdateManyWithoutNewsItemsInput;
}

export interface UpvoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  repo?: RepoWhereInput;
  AND?: UpvoteWhereInput[] | UpvoteWhereInput;
  OR?: UpvoteWhereInput[] | UpvoteWhereInput;
  NOT?: UpvoteWhereInput[] | UpvoteWhereInput;
}

export interface UserUpdateOneRequiredWithoutNewsItemsInput {
  create?: UserCreateWithoutNewsItemsInput;
  update?: UserUpdateWithoutNewsItemsDataInput;
  upsert?: UserUpsertWithoutNewsItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface TalkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  alt?: String;
  alt_not?: String;
  alt_in?: String[] | String;
  alt_not_in?: String[] | String;
  alt_lt?: String;
  alt_lte?: String;
  alt_gt?: String;
  alt_gte?: String;
  alt_contains?: String;
  alt_not_contains?: String;
  alt_starts_with?: String;
  alt_not_starts_with?: String;
  alt_ends_with?: String;
  alt_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  speaker?: UserWhereInput;
  length?: Int;
  length_not?: Int;
  length_in?: Int[] | Int;
  length_not_in?: Int[] | Int;
  length_lt?: Int;
  length_lte?: Int;
  length_gt?: Int;
  length_gte?: Int;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TalkWhereInput[] | TalkWhereInput;
  OR?: TalkWhereInput[] | TalkWhereInput;
  NOT?: TalkWhereInput[] | TalkWhereInput;
}

export interface UserUpdateWithoutNewsItemsDataInput {
  name?: String;
  username?: String;
  email?: String;
  talks?: TalkUpdateManyWithoutSpeakerInput;
  githubToken?: String;
  profilePic?: String;
}

export interface UpvoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UpvoteWhereInput;
  AND?: UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput;
  OR?: UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput;
  NOT?: UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput;
}

export interface TalkUpdateManyWithoutSpeakerInput {
  create?: TalkCreateWithoutSpeakerInput[] | TalkCreateWithoutSpeakerInput;
  delete?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  set?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  disconnect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  update?:
    | TalkUpdateWithWhereUniqueWithoutSpeakerInput[]
    | TalkUpdateWithWhereUniqueWithoutSpeakerInput;
  upsert?:
    | TalkUpsertWithWhereUniqueWithoutSpeakerInput[]
    | TalkUpsertWithWhereUniqueWithoutSpeakerInput;
  deleteMany?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  updateMany?:
    | TalkUpdateManyWithWhereNestedInput[]
    | TalkUpdateManyWithWhereNestedInput;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TalkWhereInput;
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  NOT?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
}

export interface TalkUpdateWithWhereUniqueWithoutSpeakerInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateWithoutSpeakerDataInput;
}

export interface RepoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RepoWhereInput;
  AND?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
  OR?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
  NOT?: RepoSubscriptionWhereInput[] | RepoSubscriptionWhereInput;
}

export interface TalkUpdateWithoutSpeakerDataInput {
  slug?: String;
  title?: String;
  previewImage?: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
  tags?: TagUpdateManyWithoutTalksInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  username?: String;
  email?: String;
  githubToken?: String;
  profilePic?: String;
}

export interface TagUpdateManyWithoutTalksInput {
  create?: TagCreateWithoutTalksInput[] | TagCreateWithoutTalksInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  set?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutTalksInput[]
    | TagUpdateWithWhereUniqueWithoutTalksInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutTalksInput[]
    | TagUpsertWithWhereUniqueWithoutTalksInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface RepoUpsertWithoutUpvotesInput {
  update: RepoUpdateWithoutUpvotesDataInput;
  create: RepoCreateWithoutUpvotesInput;
}

export interface TagUpdateWithWhereUniqueWithoutTalksInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutTalksDataInput;
}

export interface RepoUpdateOneRequiredWithoutUpvotesInput {
  create?: RepoCreateWithoutUpvotesInput;
  update?: RepoUpdateWithoutUpvotesDataInput;
  upsert?: RepoUpsertWithoutUpvotesInput;
  connect?: RepoWhereUniqueInput;
}

export interface TagUpdateWithoutTalksDataInput {
  name?: String;
  newsItems?: NewsUpdateManyWithoutTagsInput;
  repos?: RepoUpdateManyWithoutTagsInput;
}

export interface UpvoteUpdateInput {
  user?: UserUpdateOneRequiredInput;
  repo?: RepoUpdateOneRequiredWithoutUpvotesInput;
}

export interface NewsUpdateManyWithoutTagsInput {
  create?: NewsCreateWithoutTagsInput[] | NewsCreateWithoutTagsInput;
  delete?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  set?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  disconnect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  update?:
    | NewsUpdateWithWhereUniqueWithoutTagsInput[]
    | NewsUpdateWithWhereUniqueWithoutTagsInput;
  upsert?:
    | NewsUpsertWithWhereUniqueWithoutTagsInput[]
    | NewsUpsertWithWhereUniqueWithoutTagsInput;
  deleteMany?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  updateMany?:
    | NewsUpdateManyWithWhereNestedInput[]
    | NewsUpdateManyWithWhereNestedInput;
}

export interface RepoCreateOneWithoutUpvotesInput {
  create?: RepoCreateWithoutUpvotesInput;
  connect?: RepoWhereUniqueInput;
}

export interface NewsUpdateWithWhereUniqueWithoutTagsInput {
  where: NewsWhereUniqueInput;
  data: NewsUpdateWithoutTagsDataInput;
}

export interface UpvoteCreateInput {
  user: UserCreateOneInput;
  repo: RepoCreateOneWithoutUpvotesInput;
}

export interface NewsUpdateWithoutTagsDataInput {
  slug?: String;
  title?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer?: UserUpdateOneRequiredWithoutNewsItemsInput;
}

export interface TalkUpdateInput {
  slug?: String;
  title?: String;
  previewImage?: String;
  alt?: String;
  isFeatured?: Boolean;
  speaker?: UserUpdateOneWithoutTalksInput;
  length?: Int;
  tags?: TagUpdateManyWithoutTalksInput;
}

export interface NewsUpsertWithWhereUniqueWithoutTagsInput {
  where: NewsWhereUniqueInput;
  update: NewsUpdateWithoutTagsDataInput;
  create: NewsCreateWithoutTagsInput;
}

export interface TalkCreateInput {
  slug: String;
  title: String;
  previewImage: String;
  alt?: String;
  isFeatured?: Boolean;
  speaker?: UserCreateOneWithoutTalksInput;
  length?: Int;
  tags?: TagCreateManyWithoutTalksInput;
}

export interface NewsScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  OR?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  NOT?: NewsScalarWhereInput[] | NewsScalarWhereInput;
}

export interface TagUpdateInput {
  name?: String;
  talks?: TalkUpdateManyWithoutTagsInput;
  newsItems?: NewsUpdateManyWithoutTagsInput;
  repos?: RepoUpdateManyWithoutTagsInput;
}

export interface NewsUpdateManyWithWhereNestedInput {
  where: NewsScalarWhereInput;
  data: NewsUpdateManyDataInput;
}

export interface TagCreateInput {
  name: String;
  talks?: TalkCreateManyWithoutTagsInput;
  newsItems?: NewsCreateManyWithoutTagsInput;
  repos?: RepoCreateManyWithoutTagsInput;
}

export interface TagCreateWithoutReposInput {
  name: String;
  talks?: TalkCreateManyWithoutTagsInput;
  newsItems?: NewsCreateManyWithoutTagsInput;
}

export interface TagUpsertWithWhereUniqueWithoutReposInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutReposDataInput;
  create: TagCreateWithoutReposInput;
}

export interface RepoUpdateManyWithoutTagsInput {
  create?: RepoCreateWithoutTagsInput[] | RepoCreateWithoutTagsInput;
  delete?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  connect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  set?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  disconnect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
  update?:
    | RepoUpdateWithWhereUniqueWithoutTagsInput[]
    | RepoUpdateWithWhereUniqueWithoutTagsInput;
  upsert?:
    | RepoUpsertWithWhereUniqueWithoutTagsInput[]
    | RepoUpsertWithWhereUniqueWithoutTagsInput;
  deleteMany?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  updateMany?:
    | RepoUpdateManyWithWhereNestedInput[]
    | RepoUpdateManyWithWhereNestedInput;
}

export interface TagUpdateWithoutReposDataInput {
  name?: String;
  talks?: TalkUpdateManyWithoutTagsInput;
  newsItems?: NewsUpdateManyWithoutTagsInput;
}

export interface RepoUpdateWithWhereUniqueWithoutTagsInput {
  where: RepoWhereUniqueInput;
  data: RepoUpdateWithoutTagsDataInput;
}

export interface TagUpdateManyWithoutReposInput {
  create?: TagCreateWithoutReposInput[] | TagCreateWithoutReposInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  set?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutReposInput[]
    | TagUpdateWithWhereUniqueWithoutReposInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutReposInput[]
    | TagUpsertWithWhereUniqueWithoutReposInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface RepoUpdateWithoutTagsDataInput {
  slug?: String;
  githubName?: String;
  githubOwner?: String;
  githubUrl?: String;
  ownerUsername?: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserUpdateOneInput;
  upvotes?: UpvoteUpdateManyWithoutRepoInput;
}

export interface UserCreateOneWithoutNewsItemsInput {
  create?: UserCreateWithoutNewsItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  talks_every?: TalkWhereInput;
  talks_some?: TalkWhereInput;
  talks_none?: TalkWhereInput;
  newsItems_every?: NewsWhereInput;
  newsItems_some?: NewsWhereInput;
  newsItems_none?: NewsWhereInput;
  repos_every?: RepoWhereInput;
  repos_some?: RepoWhereInput;
  repos_none?: RepoWhereInput;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface TalkCreateManyWithoutSpeakerInput {
  create?: TalkCreateWithoutSpeakerInput[] | TalkCreateWithoutSpeakerInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
}

export interface UserUpdateDataInput {
  name?: String;
  username?: String;
  email?: String;
  newsItems?: NewsUpdateManyWithoutWriterInput;
  talks?: TalkUpdateManyWithoutSpeakerInput;
  githubToken?: String;
  profilePic?: String;
}

export interface TagCreateManyWithoutTalksInput {
  create?: TagCreateWithoutTalksInput[] | TagCreateWithoutTalksInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface NewsUpdateManyWithoutWriterInput {
  create?: NewsCreateWithoutWriterInput[] | NewsCreateWithoutWriterInput;
  delete?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  set?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  disconnect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
  update?:
    | NewsUpdateWithWhereUniqueWithoutWriterInput[]
    | NewsUpdateWithWhereUniqueWithoutWriterInput;
  upsert?:
    | NewsUpsertWithWhereUniqueWithoutWriterInput[]
    | NewsUpsertWithWhereUniqueWithoutWriterInput;
  deleteMany?: NewsScalarWhereInput[] | NewsScalarWhereInput;
  updateMany?:
    | NewsUpdateManyWithWhereNestedInput[]
    | NewsUpdateManyWithWhereNestedInput;
}

export interface NewsCreateManyWithoutTagsInput {
  create?: NewsCreateWithoutTagsInput[] | NewsCreateWithoutTagsInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
}

export interface NewsUpdateWithWhereUniqueWithoutWriterInput {
  where: NewsWhereUniqueInput;
  data: NewsUpdateWithoutWriterDataInput;
}

export interface RepoCreateManyWithoutTagsInput {
  create?: RepoCreateWithoutTagsInput[] | RepoCreateWithoutTagsInput;
  connect?: RepoWhereUniqueInput[] | RepoWhereUniqueInput;
}

export interface NewsUpdateWithoutWriterDataInput {
  slug?: String;
  title?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
  tags?: TagUpdateManyWithoutNewsItemsInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface TagUpdateManyWithoutNewsItemsInput {
  create?: TagCreateWithoutNewsItemsInput[] | TagCreateWithoutNewsItemsInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  set?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutNewsItemsInput[]
    | TagUpdateWithWhereUniqueWithoutNewsItemsInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutNewsItemsInput[]
    | TagUpsertWithWhereUniqueWithoutNewsItemsInput;
  deleteMany?: TagScalarWhereInput[] | TagScalarWhereInput;
  updateMany?:
    | TagUpdateManyWithWhereNestedInput[]
    | TagUpdateManyWithWhereNestedInput;
}

export interface NewsCreateManyWithoutWriterInput {
  create?: NewsCreateWithoutWriterInput[] | NewsCreateWithoutWriterInput;
  connect?: NewsWhereUniqueInput[] | NewsWhereUniqueInput;
}

export interface TagUpdateWithWhereUniqueWithoutNewsItemsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutNewsItemsDataInput;
}

export interface TagCreateManyWithoutNewsItemsInput {
  create?: TagCreateWithoutNewsItemsInput[] | TagCreateWithoutNewsItemsInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface TagUpdateWithoutNewsItemsDataInput {
  name?: String;
  talks?: TalkUpdateManyWithoutTagsInput;
  repos?: RepoUpdateManyWithoutTagsInput;
}

export interface TalkCreateManyWithoutTagsInput {
  create?: TalkCreateWithoutTagsInput[] | TalkCreateWithoutTagsInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
}

export interface TalkUpdateManyWithoutTagsInput {
  create?: TalkCreateWithoutTagsInput[] | TalkCreateWithoutTagsInput;
  delete?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  connect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  set?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  disconnect?: TalkWhereUniqueInput[] | TalkWhereUniqueInput;
  update?:
    | TalkUpdateWithWhereUniqueWithoutTagsInput[]
    | TalkUpdateWithWhereUniqueWithoutTagsInput;
  upsert?:
    | TalkUpsertWithWhereUniqueWithoutTagsInput[]
    | TalkUpsertWithWhereUniqueWithoutTagsInput;
  deleteMany?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  updateMany?:
    | TalkUpdateManyWithWhereNestedInput[]
    | TalkUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutTalksInput {
  create?: UserCreateWithoutTalksInput;
  connect?: UserWhereUniqueInput;
}

export interface TalkUpdateWithWhereUniqueWithoutTagsInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateWithoutTagsDataInput;
}

export interface RepoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  githubName?: String;
  githubName_not?: String;
  githubName_in?: String[] | String;
  githubName_not_in?: String[] | String;
  githubName_lt?: String;
  githubName_lte?: String;
  githubName_gt?: String;
  githubName_gte?: String;
  githubName_contains?: String;
  githubName_not_contains?: String;
  githubName_starts_with?: String;
  githubName_not_starts_with?: String;
  githubName_ends_with?: String;
  githubName_not_ends_with?: String;
  githubOwner?: String;
  githubOwner_not?: String;
  githubOwner_in?: String[] | String;
  githubOwner_not_in?: String[] | String;
  githubOwner_lt?: String;
  githubOwner_lte?: String;
  githubOwner_gt?: String;
  githubOwner_gte?: String;
  githubOwner_contains?: String;
  githubOwner_not_contains?: String;
  githubOwner_starts_with?: String;
  githubOwner_not_starts_with?: String;
  githubOwner_ends_with?: String;
  githubOwner_not_ends_with?: String;
  githubUrl?: String;
  githubUrl_not?: String;
  githubUrl_in?: String[] | String;
  githubUrl_not_in?: String[] | String;
  githubUrl_lt?: String;
  githubUrl_lte?: String;
  githubUrl_gt?: String;
  githubUrl_gte?: String;
  githubUrl_contains?: String;
  githubUrl_not_contains?: String;
  githubUrl_starts_with?: String;
  githubUrl_not_starts_with?: String;
  githubUrl_ends_with?: String;
  githubUrl_not_ends_with?: String;
  ownerUsername?: String;
  ownerUsername_not?: String;
  ownerUsername_in?: String[] | String;
  ownerUsername_not_in?: String[] | String;
  ownerUsername_lt?: String;
  ownerUsername_lte?: String;
  ownerUsername_gt?: String;
  ownerUsername_gte?: String;
  ownerUsername_contains?: String;
  ownerUsername_not_contains?: String;
  ownerUsername_starts_with?: String;
  ownerUsername_not_starts_with?: String;
  ownerUsername_ends_with?: String;
  ownerUsername_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  owner?: UserWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  upvotes_every?: UpvoteWhereInput;
  upvotes_some?: UpvoteWhereInput;
  upvotes_none?: UpvoteWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RepoWhereInput[] | RepoWhereInput;
  OR?: RepoWhereInput[] | RepoWhereInput;
  NOT?: RepoWhereInput[] | RepoWhereInput;
}

export interface TalkUpdateWithoutTagsDataInput {
  slug?: String;
  title?: String;
  previewImage?: String;
  alt?: String;
  isFeatured?: Boolean;
  speaker?: UserUpdateOneWithoutTalksInput;
  length?: Int;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  newsItems_every?: NewsWhereInput;
  newsItems_some?: NewsWhereInput;
  newsItems_none?: NewsWhereInput;
  talks_every?: TalkWhereInput;
  talks_some?: TalkWhereInput;
  talks_none?: TalkWhereInput;
  githubToken?: String;
  githubToken_not?: String;
  githubToken_in?: String[] | String;
  githubToken_not_in?: String[] | String;
  githubToken_lt?: String;
  githubToken_lte?: String;
  githubToken_gt?: String;
  githubToken_gte?: String;
  githubToken_contains?: String;
  githubToken_not_contains?: String;
  githubToken_starts_with?: String;
  githubToken_not_starts_with?: String;
  githubToken_ends_with?: String;
  githubToken_not_ends_with?: String;
  profilePic?: String;
  profilePic_not?: String;
  profilePic_in?: String[] | String;
  profilePic_not_in?: String[] | String;
  profilePic_lt?: String;
  profilePic_lte?: String;
  profilePic_gt?: String;
  profilePic_gte?: String;
  profilePic_contains?: String;
  profilePic_not_contains?: String;
  profilePic_starts_with?: String;
  profilePic_not_starts_with?: String;
  profilePic_ends_with?: String;
  profilePic_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneWithoutTalksInput {
  create?: UserCreateWithoutTalksInput;
  update?: UserUpdateWithoutTalksDataInput;
  upsert?: UserUpsertWithoutTalksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface UserUpdateWithoutTalksDataInput {
  name?: String;
  username?: String;
  email?: String;
  newsItems?: NewsUpdateManyWithoutWriterInput;
  githubToken?: String;
  profilePic?: String;
}

export interface UserUpdateInput {
  name?: String;
  username?: String;
  email?: String;
  newsItems?: NewsUpdateManyWithoutWriterInput;
  talks?: TalkUpdateManyWithoutSpeakerInput;
  githubToken?: String;
  profilePic?: String;
}

export interface UserUpsertWithoutTalksInput {
  update: UserUpdateWithoutTalksDataInput;
  create: UserCreateWithoutTalksInput;
}

export type RepoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface TalkUpsertWithWhereUniqueWithoutTagsInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateWithoutTagsDataInput;
  create: TalkCreateWithoutTagsInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface TalkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  alt?: String;
  alt_not?: String;
  alt_in?: String[] | String;
  alt_not_in?: String[] | String;
  alt_lt?: String;
  alt_lte?: String;
  alt_gt?: String;
  alt_gte?: String;
  alt_contains?: String;
  alt_not_contains?: String;
  alt_starts_with?: String;
  alt_not_starts_with?: String;
  alt_ends_with?: String;
  alt_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  length?: Int;
  length_not?: Int;
  length_in?: Int[] | Int;
  length_not_in?: Int[] | Int;
  length_lt?: Int;
  length_lte?: Int;
  length_gt?: Int;
  length_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  OR?: TalkScalarWhereInput[] | TalkScalarWhereInput;
  NOT?: TalkScalarWhereInput[] | TalkScalarWhereInput;
}

export type TalkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  slug?: String;
}>;

export interface TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput;
  data: TalkUpdateManyDataInput;
}

export type UpvoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TalkUpdateManyDataInput {
  slug?: String;
  title?: String;
  previewImage?: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface TagUpsertWithWhereUniqueWithoutNewsItemsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutNewsItemsDataInput;
  create: TagCreateWithoutNewsItemsInput;
}

export interface RepoUpdateInput {
  slug?: String;
  githubName?: String;
  githubOwner?: String;
  githubUrl?: String;
  ownerUsername?: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserUpdateOneInput;
  tags?: TagUpdateManyWithoutReposInput;
  upvotes?: UpvoteUpdateManyWithoutRepoInput;
}

export interface TagScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TagScalarWhereInput[] | TagScalarWhereInput;
  OR?: TagScalarWhereInput[] | TagScalarWhereInput;
  NOT?: TagScalarWhereInput[] | TagScalarWhereInput;
}

export interface UserCreateWithoutNewsItemsInput {
  name: String;
  username: String;
  email?: String;
  talks?: TalkCreateManyWithoutSpeakerInput;
  githubToken: String;
  profilePic?: String;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagCreateWithoutTalksInput {
  name: String;
  newsItems?: NewsCreateManyWithoutTagsInput;
  repos?: RepoCreateManyWithoutTagsInput;
}

export interface TagUpdateManyDataInput {
  name?: String;
}

export interface RepoCreateWithoutTagsInput {
  slug: String;
  githubName: String;
  githubOwner: String;
  githubUrl: String;
  ownerUsername: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserCreateOneInput;
  upvotes?: UpvoteCreateManyWithoutRepoInput;
}

export interface NewsUpsertWithWhereUniqueWithoutWriterInput {
  where: NewsWhereUniqueInput;
  update: NewsUpdateWithoutWriterDataInput;
  create: NewsCreateWithoutWriterInput;
}

export interface NewsCreateWithoutWriterInput {
  slug: String;
  title: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  tags?: TagCreateManyWithoutNewsItemsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TalkCreateWithoutTagsInput {
  slug: String;
  title: String;
  previewImage: String;
  alt?: String;
  isFeatured?: Boolean;
  speaker?: UserCreateOneWithoutTalksInput;
  length?: Int;
}

export interface UpvoteUpdateManyWithoutRepoInput {
  create?: UpvoteCreateWithoutRepoInput[] | UpvoteCreateWithoutRepoInput;
  delete?: UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput;
  connect?: UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput;
  set?: UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput;
  disconnect?: UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput;
  update?:
    | UpvoteUpdateWithWhereUniqueWithoutRepoInput[]
    | UpvoteUpdateWithWhereUniqueWithoutRepoInput;
  upsert?:
    | UpvoteUpsertWithWhereUniqueWithoutRepoInput[]
    | UpvoteUpsertWithWhereUniqueWithoutRepoInput;
  deleteMany?: UpvoteScalarWhereInput[] | UpvoteScalarWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UpvoteUpdateWithWhereUniqueWithoutRepoInput {
  where: UpvoteWhereUniqueInput;
  data: UpvoteUpdateWithoutRepoDataInput;
}

export interface NewsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NewsWhereInput;
  AND?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
  OR?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
  NOT?: NewsSubscriptionWhereInput[] | NewsSubscriptionWhereInput;
}

export interface UpvoteUpdateWithoutRepoDataInput {
  user?: UserUpdateOneRequiredInput;
}

export interface RepoCreateWithoutUpvotesInput {
  slug: String;
  githubName: String;
  githubOwner: String;
  githubUrl: String;
  ownerUsername: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserCreateOneInput;
  tags?: TagCreateManyWithoutReposInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface TagUpdateManyMutationInput {
  name?: String;
}

export interface UpvoteUpsertWithWhereUniqueWithoutRepoInput {
  where: UpvoteWhereUniqueInput;
  update: UpvoteUpdateWithoutRepoDataInput;
  create: UpvoteCreateWithoutRepoInput;
}

export interface TagUpdateWithWhereUniqueWithoutReposInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutReposDataInput;
}

export interface UpvoteScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: UpvoteScalarWhereInput[] | UpvoteScalarWhereInput;
  OR?: UpvoteScalarWhereInput[] | UpvoteScalarWhereInput;
  NOT?: UpvoteScalarWhereInput[] | UpvoteScalarWhereInput;
}

export interface TalkCreateWithoutSpeakerInput {
  slug: String;
  title: String;
  previewImage: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
  tags?: TagCreateManyWithoutTalksInput;
}

export interface RepoUpsertWithWhereUniqueWithoutTagsInput {
  where: RepoWhereUniqueInput;
  update: RepoUpdateWithoutTagsDataInput;
  create: RepoCreateWithoutTagsInput;
}

export interface UserCreateInput {
  name: String;
  username: String;
  email?: String;
  newsItems?: NewsCreateManyWithoutWriterInput;
  talks?: TalkCreateManyWithoutSpeakerInput;
  githubToken: String;
  profilePic?: String;
}

export interface RepoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  githubName?: String;
  githubName_not?: String;
  githubName_in?: String[] | String;
  githubName_not_in?: String[] | String;
  githubName_lt?: String;
  githubName_lte?: String;
  githubName_gt?: String;
  githubName_gte?: String;
  githubName_contains?: String;
  githubName_not_contains?: String;
  githubName_starts_with?: String;
  githubName_not_starts_with?: String;
  githubName_ends_with?: String;
  githubName_not_ends_with?: String;
  githubOwner?: String;
  githubOwner_not?: String;
  githubOwner_in?: String[] | String;
  githubOwner_not_in?: String[] | String;
  githubOwner_lt?: String;
  githubOwner_lte?: String;
  githubOwner_gt?: String;
  githubOwner_gte?: String;
  githubOwner_contains?: String;
  githubOwner_not_contains?: String;
  githubOwner_starts_with?: String;
  githubOwner_not_starts_with?: String;
  githubOwner_ends_with?: String;
  githubOwner_not_ends_with?: String;
  githubUrl?: String;
  githubUrl_not?: String;
  githubUrl_in?: String[] | String;
  githubUrl_not_in?: String[] | String;
  githubUrl_lt?: String;
  githubUrl_lte?: String;
  githubUrl_gt?: String;
  githubUrl_gte?: String;
  githubUrl_contains?: String;
  githubUrl_not_contains?: String;
  githubUrl_starts_with?: String;
  githubUrl_not_starts_with?: String;
  githubUrl_ends_with?: String;
  githubUrl_not_ends_with?: String;
  ownerUsername?: String;
  ownerUsername_not?: String;
  ownerUsername_in?: String[] | String;
  ownerUsername_not_in?: String[] | String;
  ownerUsername_lt?: String;
  ownerUsername_lte?: String;
  ownerUsername_gt?: String;
  ownerUsername_gte?: String;
  ownerUsername_contains?: String;
  ownerUsername_not_contains?: String;
  ownerUsername_starts_with?: String;
  ownerUsername_not_starts_with?: String;
  ownerUsername_ends_with?: String;
  ownerUsername_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  OR?: RepoScalarWhereInput[] | RepoScalarWhereInput;
  NOT?: RepoScalarWhereInput[] | RepoScalarWhereInput;
}

export interface UserCreateWithoutTalksInput {
  name: String;
  username: String;
  email?: String;
  newsItems?: NewsCreateManyWithoutWriterInput;
  githubToken: String;
  profilePic?: String;
}

export interface RepoUpdateManyWithWhereNestedInput {
  where: RepoScalarWhereInput;
  data: RepoUpdateManyDataInput;
}

export interface RepoUpdateWithoutUpvotesDataInput {
  slug?: String;
  githubName?: String;
  githubOwner?: String;
  githubUrl?: String;
  ownerUsername?: String;
  isFeatured?: Boolean;
  description?: String;
  owner?: UserUpdateOneInput;
  tags?: TagUpdateManyWithoutReposInput;
}

export interface RepoUpdateManyDataInput {
  slug?: String;
  githubName?: String;
  githubOwner?: String;
  githubUrl?: String;
  ownerUsername?: String;
  isFeatured?: Boolean;
  description?: String;
}

export interface RepoUpdateManyMutationInput {
  slug?: String;
  githubName?: String;
  githubOwner?: String;
  githubUrl?: String;
  ownerUsername?: String;
  isFeatured?: Boolean;
  description?: String;
}

export interface TagUpsertWithWhereUniqueWithoutTalksInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutTalksDataInput;
  create: TagCreateWithoutTalksInput;
}

export interface NewsCreateWithoutTagsInput {
  slug: String;
  title: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer: UserCreateOneWithoutNewsItemsInput;
}

export interface TagCreateManyWithoutReposInput {
  create?: TagCreateWithoutReposInput[] | TagCreateWithoutReposInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface NewsUpdateManyMutationInput {
  slug?: String;
  title?: String;
  content?: String;
  previewImage?: String;
  isFeatured?: Boolean;
}

export interface UserUpsertWithoutNewsItemsInput {
  update: UserUpdateWithoutNewsItemsDataInput;
  create: UserCreateWithoutNewsItemsInput;
}

export interface TalkUpsertWithWhereUniqueWithoutSpeakerInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateWithoutSpeakerDataInput;
  create: TalkCreateWithoutSpeakerInput;
}

export interface TagCreateWithoutNewsItemsInput {
  name: String;
  talks?: TalkCreateManyWithoutTagsInput;
  repos?: RepoCreateManyWithoutTagsInput;
}

export interface NewsCreateInput {
  slug: String;
  title: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  writer: UserCreateOneWithoutNewsItemsInput;
  tags?: TagCreateManyWithoutNewsItemsInput;
}

export interface TalkUpdateManyMutationInput {
  slug?: String;
  title?: String;
  previewImage?: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
}

export interface NewsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  previewImage?: String;
  previewImage_not?: String;
  previewImage_in?: String[] | String;
  previewImage_not_in?: String[] | String;
  previewImage_lt?: String;
  previewImage_lte?: String;
  previewImage_gt?: String;
  previewImage_gte?: String;
  previewImage_contains?: String;
  previewImage_not_contains?: String;
  previewImage_starts_with?: String;
  previewImage_not_starts_with?: String;
  previewImage_ends_with?: String;
  previewImage_not_ends_with?: String;
  isFeatured?: Boolean;
  isFeatured_not?: Boolean;
  writer?: UserWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: NewsWhereInput[] | NewsWhereInput;
  OR?: NewsWhereInput[] | NewsWhereInput;
  NOT?: NewsWhereInput[] | NewsWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  username: String;
  email?: String;
  githubToken: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  githubToken: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  githubToken: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateNews {
  count: Int;
}

export interface AggregateNewsPromise
  extends Promise<AggregateNews>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNewsSubscription
  extends Promise<AsyncIterator<AggregateNews>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Talk {
  id: ID_Output;
  slug: String;
  title: String;
  previewImage: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  previewImage: () => Promise<String>;
  alt: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  speaker: <T = UserPromise>() => T;
  length: () => Promise<Int>;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  alt: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  speaker: <T = UserSubscription>() => T;
  length: () => Promise<AsyncIterator<Int>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NewsEdge {
  node: News;
  cursor: String;
}

export interface NewsEdgePromise extends Promise<NewsEdge>, Fragmentable {
  node: <T = NewsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NewsEdgeSubscription
  extends Promise<AsyncIterator<NewsEdge>>,
    Fragmentable {
  node: <T = NewsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NewsConnection {
  pageInfo: PageInfo;
  edges: NewsEdge[];
}

export interface NewsConnectionPromise
  extends Promise<NewsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NewsEdge>>() => T;
  aggregate: <T = AggregateNewsPromise>() => T;
}

export interface NewsConnectionSubscription
  extends Promise<AsyncIterator<NewsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NewsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNewsSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Upvote {
  id: ID_Output;
}

export interface UpvotePromise extends Promise<Upvote>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  repo: <T = RepoPromise>() => T;
}

export interface UpvoteSubscription
  extends Promise<AsyncIterator<Upvote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  repo: <T = RepoSubscription>() => T;
}

export interface AggregateUpvote {
  count: Int;
}

export interface AggregateUpvotePromise
  extends Promise<AggregateUpvote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUpvoteSubscription
  extends Promise<AsyncIterator<AggregateUpvote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UpvotePreviousValues {
  id: ID_Output;
}

export interface UpvotePreviousValuesPromise
  extends Promise<UpvotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UpvotePreviousValuesSubscription
  extends Promise<AsyncIterator<UpvotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UpvoteConnection {
  pageInfo: PageInfo;
  edges: UpvoteEdge[];
}

export interface UpvoteConnectionPromise
  extends Promise<UpvoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UpvoteEdge>>() => T;
  aggregate: <T = AggregateUpvotePromise>() => T;
}

export interface UpvoteConnectionSubscription
  extends Promise<AsyncIterator<UpvoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UpvoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUpvoteSubscription>() => T;
}

export interface UpvoteSubscriptionPayload {
  mutation: MutationType;
  node: Upvote;
  updatedFields: String[];
  previousValues: UpvotePreviousValues;
}

export interface UpvoteSubscriptionPayloadPromise
  extends Promise<UpvoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UpvotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UpvotePreviousValuesPromise>() => T;
}

export interface UpvoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UpvoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UpvoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UpvotePreviousValuesSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NewsSubscriptionPayload {
  mutation: MutationType;
  node: News;
  updatedFields: String[];
  previousValues: NewsPreviousValues;
}

export interface NewsSubscriptionPayloadPromise
  extends Promise<NewsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NewsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NewsPreviousValuesPromise>() => T;
}

export interface NewsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NewsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NewsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NewsPreviousValuesSubscription>() => T;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NewsPreviousValues {
  id: ID_Output;
  slug: String;
  title: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NewsPreviousValuesPromise
  extends Promise<NewsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NewsPreviousValuesSubscription
  extends Promise<AsyncIterator<NewsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface Repo {
  id: ID_Output;
  slug: String;
  githubName: String;
  githubOwner: String;
  githubUrl: String;
  ownerUsername: String;
  isFeatured?: Boolean;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RepoPromise extends Promise<Repo>, Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  githubName: () => Promise<String>;
  githubOwner: () => Promise<String>;
  githubUrl: () => Promise<String>;
  ownerUsername: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  description: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  upvotes: <T = FragmentableArray<Upvote>>(
    args?: {
      where?: UpvoteWhereInput;
      orderBy?: UpvoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RepoSubscription
  extends Promise<AsyncIterator<Repo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  githubName: () => Promise<AsyncIterator<String>>;
  githubOwner: () => Promise<AsyncIterator<String>>;
  githubUrl: () => Promise<AsyncIterator<String>>;
  ownerUsername: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  upvotes: <T = Promise<AsyncIterator<UpvoteSubscription>>>(
    args?: {
      where?: UpvoteWhereInput;
      orderBy?: UpvoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RepoEdge {
  node: Repo;
  cursor: String;
}

export interface RepoEdgePromise extends Promise<RepoEdge>, Fragmentable {
  node: <T = RepoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepoEdgeSubscription
  extends Promise<AsyncIterator<RepoEdge>>,
    Fragmentable {
  node: <T = RepoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepoSubscriptionPayload {
  mutation: MutationType;
  node: Repo;
  updatedFields: String[];
  previousValues: RepoPreviousValues;
}

export interface RepoSubscriptionPayloadPromise
  extends Promise<RepoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepoPreviousValuesPromise>() => T;
}

export interface RepoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepoPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface RepoPreviousValues {
  id: ID_Output;
  slug: String;
  githubName: String;
  githubOwner: String;
  githubUrl: String;
  ownerUsername: String;
  isFeatured?: Boolean;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RepoPreviousValuesPromise
  extends Promise<RepoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  githubName: () => Promise<String>;
  githubOwner: () => Promise<String>;
  githubUrl: () => Promise<String>;
  ownerUsername: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RepoPreviousValuesSubscription
  extends Promise<AsyncIterator<RepoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  githubName: () => Promise<AsyncIterator<String>>;
  githubOwner: () => Promise<AsyncIterator<String>>;
  githubUrl: () => Promise<AsyncIterator<String>>;
  ownerUsername: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface News {
  id: ID_Output;
  slug: String;
  title: String;
  content: String;
  previewImage?: String;
  isFeatured?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NewsPromise extends Promise<News>, Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  previewImage: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  writer: <T = UserPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NewsSubscription
  extends Promise<AsyncIterator<News>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  writer: <T = UserSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  username: String;
  email?: String;
  githubToken: String;
  profilePic?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  newsItems: <T = FragmentableArray<News>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = FragmentableArray<Talk>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  githubToken: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  newsItems: <T = Promise<AsyncIterator<NewsSubscription>>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  githubToken: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepoConnection {
  pageInfo: PageInfo;
  edges: RepoEdge[];
}

export interface RepoConnectionPromise
  extends Promise<RepoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepoEdge>>() => T;
  aggregate: <T = AggregateRepoPromise>() => T;
}

export interface RepoConnectionSubscription
  extends Promise<AsyncIterator<RepoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepoSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  slug: String;
  title: String;
  previewImage: String;
  alt?: String;
  isFeatured?: Boolean;
  length?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  slug: () => Promise<String>;
  title: () => Promise<String>;
  previewImage: () => Promise<String>;
  alt: () => Promise<String>;
  isFeatured: () => Promise<Boolean>;
  length: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  slug: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  previewImage: () => Promise<AsyncIterator<String>>;
  alt: () => Promise<AsyncIterator<String>>;
  isFeatured: () => Promise<AsyncIterator<Boolean>>;
  length: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  talks: <T = FragmentableArray<Talk>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  newsItems: <T = FragmentableArray<News>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repos: <T = FragmentableArray<Repo>>(
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(
    args?: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  newsItems: <T = Promise<AsyncIterator<NewsSubscription>>>(
    args?: {
      where?: NewsWhereInput;
      orderBy?: NewsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  repos: <T = Promise<AsyncIterator<RepoSubscription>>>(
    args?: {
      where?: RepoWhereInput;
      orderBy?: RepoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRepo {
  count: Int;
}

export interface AggregateRepoPromise
  extends Promise<AggregateRepo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepoSubscription
  extends Promise<AsyncIterator<AggregateRepo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface UpvoteEdge {
  node: Upvote;
  cursor: String;
}

export interface UpvoteEdgePromise extends Promise<UpvoteEdge>, Fragmentable {
  node: <T = UpvotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UpvoteEdgeSubscription
  extends Promise<AsyncIterator<UpvoteEdge>>,
    Fragmentable {
  node: <T = UpvoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "News",
    embedded: false
  },
  {
    name: "Talk",
    embedded: false
  },
  {
    name: "Repo",
    embedded: false
  },
  {
    name: "Upvote",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
